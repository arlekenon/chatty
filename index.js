const TelegramApi = require('node-telegram-bot-api')
//const OpenAiApi = require('openai')
const {addtOptions,nastOptions, roleOptions, vibeOptions,persOptions, numbOptions, againOptions, keyOptions, iionkeyOptions,
    addvOptions
} = require('./options')
const {vozm, surp} =require('./infofile')
const dotenv = require("dotenv");
dotenv.config();
const mongoose = require("mongoose");
const openai = require('./openai/getAnswer')
var chatgpt = false

const chatsroles = {}
const chatsnasts = {}

const bot = new TelegramApi(process.env.TG_API_KEY, {polling: true})
//const openai = OpenAiApi
//openai.api_key = OAI_API_KEY



const startGame = async(chatId) => {
    await bot.sendMessage(chatId, `–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞`, numbOptions);
}

const rolefunction = async(roleprompt) => {
    const roleprompton = roleprompt
    console.log(roleprompton)
}
const start = (roleprompton) => {
    bot.setMyCommands([
        {command:'/start', description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'},
        {command:'/info', description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ'},
        {command:'/on', description: '–í–∫–ª—é—á–∏—Ç—å ChatGPT'},
        {command:'/off', description: '–í—ã–∫–ª—é—á–∏—Ç—å ChatGPT'},
        //{command:'/numboard', description: '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞'},
    ])


    bot.on('message', async msg => {
        const text = msg.text;
        const chatId = msg.chat.id;

        if (text === '/start') {
            await bot.sendSticker(chatId, `https://tlgrm.ru/_/stickers/348/e30/348e3088-126b-4939-b317-e9036499c515/1.webp`);
            return bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º ChatGPT –±–æ—Ç!`, keyOptions);
        }
        if (text === '/info') {
            return bot.sendMessage(chatId, `–¢–µ–±—è –∑–æ–≤—É—Ç ${msg.from.first_name} ${msg.from.last_name}`);

        }
        if (text === '/off') {
            chatgpt = false
            return bot.sendMessage(chatId, `ChatGPT –≤—ã–∫–ª—é—á–µ–Ω.`);
        }

        if (text === '–í—ã–∫–ª—é—á–∏—Ç—å ChatGPT') {
            chatgpt = false
            return bot.sendMessage(chatId, `ChatGPT –≤—ã–∫–ª—é—á–µ–Ω, –º–æ–∂–µ—à—å –∑–∞–Ω—è—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.`, keyOptions);
        }

        if (chatgpt === true) {
            const content = chatsroles[chatId] + chatsnasts[chatId] + text
            console.log(content);
            return openai.getAnswer(chatId, content, bot)
        }

        if (text === '/on') {
            chatgpt = true
            return bot.sendMessage(chatId, `ChatGPT –≤–∫–ª—é—á—ë–Ω.`);
        }



        if (text === '–ù–∞—á–∞—Ç—å —á–∞—Çüí≠') {
            chatgpt = true
            return bot.sendMessage(chatId, `üî• –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ üëáüèª –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, —è –Ω–µ –∫—É—Å–∞—é—Å—å... –≤ –æ—Å–Ω–æ–≤–Ω–æ–º.`, iionkeyOptions);
        }

        if (text === '–í—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞üòú') {
            return bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞`, persOptions);
        }

        if (text === '–í—ã–±—Ä–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µüßê') {
            return bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞`, vibeOptions);
        }

        if (text === '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏üí´') {
            return bot.sendMessage(chatId, vozm, keyOptions);
        }

        if (text === '–°—é—Ä–ø—Ä–∏–∑üéÅ') {
            return bot.sendMessage(chatId, surp, keyOptions);
        }

        if (text === '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏üóù') {
            return bot.sendMessage(chatId, `–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º`, keyOptions);
        }

        if (text === '–û –±–æ—Ç–µ ‚ù§') {
            return bot.sendMessage(chatId, `ChatGPT –±–æ—Ç - –æ–±—â–∞–π—Å—è, —Ç–≤–∞—Ä–∏, –∏–≥—Ä–∞–π!`, keyOptions);
        }
        if (text === '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–º–∏—É–ºüíé') {
            return bot.sendMessage(chatId, `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, —Å –≤–∞–º–∏ —Å–≤—è–∂–∏—Ç—Å—è –∞–¥–º–∏–Ω!`, keyOptions);
        }

        return bot.sendMessage(chatId, `–¢—ã –Ω–∞–ø–∏—Å–∞–ª –º–Ω–µ ${text}`)
    })

    bot.on ('callback_query', async msg => {
        const data = msg.data;
        const chatId = msg.message.chat.id;
        //console.log(roleOptions[data]);
        //console.log(nastOptions[data]);

        if (chatgpt === true) {
            console.log(data)
            const promptadd = addtOptions[data]
            console.log(promptadd)
            //await bot.sendMessage(chatId, `${promptadd}`)
            //await bot.sendMessage(chatId, `${data}`)
            const lustcont = openai.chatslastcont[chatId]
            const content = lustcont + promptadd
            console.log(content);
            return openai.getAnswer(chatId, content, bot)
        }

        if(data === '/again'){
            return startGame(chatId)
     }
        if(roleOptions[data] != undefined){
            chatsroles[chatId] = roleOptions[data]
            console.log(chatsroles[chatId]);
            return bot.sendMessage(chatId, `–¢—ã –≤—ã–±—Ä–∞–ª ${data}`, keyOptions)
        }
        if(nastOptions[data] != undefined){
            chatsnasts[chatId] = nastOptions[data]
            console.log(chatsnasts[chatId]);
            return bot.sendMessage(chatId, `–¢—ã –≤—ã–±—Ä–∞–ª ${data}`, keyOptions)
        }

        return bot.sendMessage(chatId, `–¢—ã –≤—ã–±—Ä–∞–ª ${data}`, keyOptions)
    })

    bot.on ('voice', async msg => {
        try {
            const chatId = msg.chat.id;
            const link = await bot.getFileLink(msg.voice.file_id)
            return bot.sendMessage(chatId, `–°—Å—ã–ª–∫–∞ ${link}`, keyOptions)
        } catch (e) {
            return bot.sendMessage(chatId, `–û—à–∏–±–∫–∞ ${e}`, keyOptions)
        }
    })

}

start()